package controllers_test

import (
	aws2 "github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/acm"
	"github.com/backjo/aws-cert-importer/controllers"
	"github.com/backjo/aws-cert-importer/pkg/aws"
	cmapiv1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1"
	cmmetav1 "github.com/jetstack/cert-manager/pkg/apis/meta/v1"
	corev1 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client/fake"
	"testing"
)

type MockService struct {
	input *acm.ImportCertificateInput
}

func (m *MockService) UpsertCertificate(input *acm.ImportCertificateInput) (*aws.UpsertCertificateResponse, error) {
	arn := "test"
	m.input = input
	return &aws.UpsertCertificateResponse{
		CertificateArn: &arn,
		Tags:           nil,
	}, nil
}

func (m *MockService) DeleteCertificate(input *acm.DeleteCertificateInput) (*acm.DeleteCertificateOutput, error) {
	return nil, &acm.ResourceNotFoundException{}
}

func hasTag(key string, value string, tags []*acm.Tag) bool {
	for _, tag := range tags {
		if *tag.Key == key && *tag.Value == value {
			return true
		}
	}
	return false
}

func TestImport(t *testing.T) {
	basicCert := cmapiv1.Certificate{
		TypeMeta: v1.TypeMeta{},
		ObjectMeta: v1.ObjectMeta{
			Annotations: map[string]string{
				"legalzoom.com/import-to-acm": "true",
			},
			Name:       "bar",
			Namespace:  "foo",
			Finalizers: []string{"certificate.legalzoom.com"},
		},
		Spec: cmapiv1.CertificateSpec{
			SecretName: "secret",
		},
		Status: cmapiv1.CertificateStatus{
			Revision: aws2.Int(2),
		},
	}

	basicSecret := &corev1.Secret{
		ObjectMeta: v1.ObjectMeta{
			Name:      "secret",
			Namespace: "foo",
		},
		Data: map[string][]byte{
			"tls.key": []byte("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBeVh4QjdVNDhxWVdTL2Jhd3Z6QWJ3b2R3OFhDNUNrczIwTi85bFRpL2psc3I1QkQ3Ck1sY1pxUDkwbVZZVFBwYm9DY3ZjdVFqOHZPSm5WQTYzaXdoTi9xN2lpdVlOUkh2VkMzd3JyL2lIclZVVzNFUUoKZmoxYVBhVHc0TjFGRHV4M2FkRFh1bmJ3dExtY0EyV1lMaEMvZDh6SnBYSXIwMUVTdTBIcGwrZVhjY051NU9TTwpKTERWSndwU2o4VVdpU0ozZjVYTlNaTTRxUUdoQXpJbTQwSVMyNlg3UEQydm5OVnRxNXF3YlU4UVFac0JhU2FiCm5VakNlVFhVaE1vZVJXbWhmODdqMi9BRXFwdFJWaHYzUFF0RmNmTDNLM3J3U3JVVzloTnZ0aU1JRlpvb0xKZGcKRGhPem5GeVdLWGUwREhPU0wwTlJqdmFOOFFiaUY4eUcwOWVKNk5oZzNJdnpzOWxzSlBpbHFQT0FkVDF2Y1l2awpOVmVpKzBsd1JJellyelcxcWFIWGIrTUlXQlk1ZEFxTk1JSFV1Q3laY1JIb2xlT0h4ejVEUU1xZm1rOXVmYk9uClk2U3dmNlNkcjVpeFNKcTFzb0Q3OEhOeEUxRURkMzdZdDRrbDV6UFFTSERJdm8vTU5jbnZOSjZDTk5Pemd5c0gKMURCR3FmWm1jSnFHWXRSUHdMSjRwbUZzclprQ0FRMi8wclF5dHpuYnVMdmx4TkJzMVFGOE5UQkh2dzFBQXpNMwoySlo5QXJ6a3h3SzhqQ1pBcWVhNDdXaFY4eVd4cSs5bnM2aFlFTjJBVWJkanViVUs0QjJrYmJUdXBJMjNRYkhNCisyamsrNjR3N2g3ZzFPUkZaM2c4YlFIWVJQbzhBTHFIeGFCOHRPNVk2M0RlOUhUR3MvZ1YxZmxkTlA4Q0F3RUEKQVFLQ0FnQVJWdWcxaSs0Y2lLcEZ1MXNxbVBGS3BHMUwyZStTdXpaVWMzSlhUVEx2QlZtWm52eC9NSSs4dzM4OQpVdk1GQitlZ01ETW1tV2RtdWZVNmZxbTlCVkh4QVF2dCtDNWNIbXdQT1BocGhISG9zTkh1MHN3ZVdSbFRCTWJXCkV6VEdQQU5xejlaQTdjdDVRaC96Q3VNMTA2c21uREVlVTkwQnFwQjZIUW9GVUtEdjRXbkJ1UW1panJWSlR0SWMKSFZIN0swUXRicTdrRGc5cVBBR25UTUdiL1N1eVMyNTdtTE5zUTlIVVd0T2tGSkhKazVWamZ6Y1ZLaFhTYUplSgpkZnQwN2NwQVBZWE9mN0ZuSFVhNnFsMTBtMnUyaXJwS3U2SENUQ05WdWdaN0hqaXI0MEJoMWdVbU1QdmNFUHU3ClJkbncyR0ZVUCs3YzVzc0FXeDlKL1FmOVl5Y3pBM3JCNFVDU1p5RWVZajZDbEV1akVoaXc0RWpkMHRQTjAvcmoKNUVXQ0JsV3RWZzl3eXVlV1dYSWJvTG13U3Q3WGJHbnBvL1JOUm1JZ2pMYnVqaFA1Ynk2VDVhMGJCZVRnejMrRwpuc2UwWXFpVHVUc05hVmFaSkpQQVlnQnBlRk1pVEk3ZEV6ZGpWUVl4OHpwclpNUzZ0ci9iZWVSNUlEWjVpV2dMCml5UmZLUWpjc1I0aVVxMm90SjdNakRZbWY0VDExdjIwaUVSUGRhelNoTjFweW02NjFUUHV4YnJpQU9pdnE5cUwKQ0R4Q3IvTzJaSDdUaHM0enNicVBWcjZBSTZJeEt3UU1XcmY3ZjFZQmFudi9MMFZTM0d5ZkJYcjNrc1FCdlZzQQpLUFNZTVp5NzNqaU9aNU81Rm1DRmNnTFRveERBQ1J6QUJmazZSZjJMOFcyTWdKUHhBUUtDQVFFQTlDTVVkVit5CmtnZlJJdGJ5UGpaYjhBTlRBd3FTSFJOSTVBR1JxWll4SWdKS1JOM2VCYkM5aGZEMU9zR2FvNUI3bDZlTnpuR28KaXhYYkhQWEVHcDhDaURLMzdubGViNXlZZU9FYkI5aG0yT2JIMUdzQ1BpaVBsQThhcVd1MVJzUjdXS3pRNXpXaApyOHZOSVo3YVZNVnJTSlAvWlRPV0kzNHZBQ1RGZmFadzJkZ3VXdUNIYjRRZmRmVTFxV01rMG1taGlkdDR4WTMvClJCa3NGWlFvYzA5R0hydVREL3lsL05yZVh4UzM4NE9PSjRDTzdTQWhpQzJwRkZNYmdDTG9LOWdteHRtMWwzdlcKQm05UHFCelE1RzZwVHFnUE9nWEVIV1h1SE1GUm5MY0JYaldwWmx1b29tNm84MmtyeEhid3NkbXExRnk3cGZObAoxaHd1OGlDemI5M0ZjUUtDQVFFQTAwYWR5TUpSaXNYQnRVU0NTcHpyU2Z2SHRGaHoydnlhY0tnVDRRUjU2SUM3CmJSazJuV3B0MmxiS05sRXE1MkpGZ3hkZ293OEUwNUhzNkszdHdQUkUxKys5bHFlaVRXbExqbjE3bGw2Nnk4QWEKS1N3TGErNjJFVmJvQXNlaG9zTDdUWGYvK2ZDQUszWWJQNGxzMkJNN3hMNFk3NWNaNDJmUGt3MkVlak5idzZLRgo1L3pwaDRQUk5mUnBrM0g2K0NSWkRHK1JaTEY1a05wZVo3dlBZTGJmSnpoZGl3SXpKMzNOdk5tTTc2bktQYVNWClZsR2ZyckhNYm1oUjZ6RGZ1V1hxTnhoTGtWMmZGVTExa09HWE9DWFVyUnUvL1ZENDhPcXgvL2o3MUdBOS85aXAKbWRqdWZSZURtaTF3UXdqektyYzd3N1ZUbmpNVXBaTFVPdWZMSEMycGJ3S0NBUUVBcnNyMitOcGRkYVJYSGdTYgpSK09QaTVZMXR2VzRpMHlsWVdtbUtxODMya3VkZFJVTXd6STVYMDZYcFV1OE5lTmFPY2hqQlMzbktEMnJ0VjVZCjIxNkJaNVk0am1zaksvSUlVSE9LOE9FRk1jSjV6Q0laWnZ1UFlNZzNwSmxUSHFuS1RrRGRDTTBqU0VRNFNCdjkKNGJlL0NpVzhNMjd0emRlb093Z1l4YytHK05HSXp0UDI0K2JLeDUrYW5mNDMvTlpZSytXUTRKQzc5THU1RG5JWApUQWUwQW9qMXovcHB0VkhXNkdoakU5eGF5UG1JVzBvbjkrSUpMbDRhVUhHdG5NYVRiTWV1OWhoWnNoMjhBSGN4Ck1IdnlpRGhYUG9tbVVnNEtuMWZoNEx3K0pIOXpHN0FBV3R1ejV5S2pqWFJDL0hNRmxpb1d4OGd1WDArcVpQejQKdTkwaVlRS0NBUUFyUGxyeFNvU3lLTVA3UENpRzZSTm5zemN1L0tQS0FNWURwUU5jblRQdW1OckQrOU1uNlM3Two3OUMzeVdsRXJ1S1hjR09CUElPNllqWGhjaWdseEZtSzhURVc4dnpQWjJ2bG9GMTVhNjVFSWUrNDJhRUUySGsvCmwxQXBzWDZ0OThiRUZubTRTTGVUTGJ0cUI5RFZjU3BjbktReDlmV0FqREQ2WWx2cFB6WGJGeHJkWHZEVm9lOWkKWWNKeVFYUWk4aDJmNC80WVpCTUR5UTVsb1JWVE1Gc0FoaEx2YnVYVmdYUm80UVp0ejR6cmpSSmI5cHorZnJuZgpKMDhOR3BYUU5zSDN3T3RHdDZqbURWS3c4dHVtekdkNWZ5S08wTklEVGFaZFJETVhSeE9wbUVrdWlpNVdRRWZaCmVNOXZpUmRzZU5Dc3dDSjdVTzA2N3BDdDlkK214dG5WQW9JQkFDbzhxZk1NaXdUaWFRQkdqL1UyNTZjaDBvMXQKcnNjWGNsSEVHdGNCam05dkFlN1Y0SkdIajN5c24yMFZWNmQ1SmVyRVAvSmp5Sk40R2E1TW5tN3NDekFEN0RjSgpBTUFxUVNxb2tCODVsQ0xIUUVXR3Q5dU5HMnhCZjRJR1l4VEx6UENUd0NHOUR3dHZEV1VYby9nOFpOblVwRkR4Clo5UThFbDRwOXhBZzFZWUNLUGhOcHIrNit0SVBkS1dFaWJhWUZMaEhEdWJ2SXZSa3FrR3FhdWNEdVM1S0dEYmYKeXBZd0g1dUN1Qk5ta3EvaG8wdEhNeG80czZvSWlWenFPSWNmUnJUTUFidjdrRmNaZGtiYVQyOC81ekFmWk9OQwpuWGVVT1RpQXBQQ2RnWXN3V21GYUVzTUdpL09yRlA0eHNYNHdFQTF1ZFYxdlYyMlY3Zkx3NmVPQ2NVZz0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"),
			"tls.crt": []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVsakNDQW40Q0NRREdLQUxVelhzZDJqQU5CZ2txaGtpRzl3MEJBUXNGQURBTk1Rc3dDUVlEVlFRR0V3SlYKVXpBZUZ3MHlNREV4TWpJeU1EUTFORGxhRncweU1URXhNakl5TURRMU5EbGFNQTB4Q3pBSkJnTlZCQVlUQWxWVApNSUlDSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQXlYeEI3VTQ4cVlXUy9iYXd2ekFiCndvZHc4WEM1Q2tzMjBOLzlsVGkvamxzcjVCRDdNbGNacVA5MG1WWVRQcGJvQ2N2Y3VRajh2T0puVkE2M2l3aE4KL3E3aWl1WU5SSHZWQzN3cnIvaUhyVlVXM0VRSmZqMWFQYVR3NE4xRkR1eDNhZERYdW5id3RMbWNBMldZTGhDLwpkOHpKcFhJcjAxRVN1MEhwbCtlWGNjTnU1T1NPSkxEVkp3cFNqOFVXaVNKM2Y1WE5TWk00cVFHaEF6SW00MElTCjI2WDdQRDJ2bk5WdHE1cXdiVThRUVpzQmFTYWJuVWpDZVRYVWhNb2VSV21oZjg3ajIvQUVxcHRSVmh2M1BRdEYKY2ZMM0szcndTclVXOWhOdnRpTUlGWm9vTEpkZ0RoT3puRnlXS1hlMERIT1NMME5SanZhTjhRYmlGOHlHMDllSgo2TmhnM0l2enM5bHNKUGlscVBPQWRUMXZjWXZrTlZlaSswbHdSSXpZcnpXMXFhSFhiK01JV0JZNWRBcU5NSUhVCnVDeVpjUkhvbGVPSHh6NURRTXFmbWs5dWZiT25ZNlN3ZjZTZHI1aXhTSnExc29ENzhITnhFMUVEZDM3WXQ0a2wKNXpQUVNIREl2by9NTmNudk5KNkNOTk96Z3lzSDFEQkdxZlptY0pxR1l0UlB3TEo0cG1Gc3Jaa0NBUTIvMHJReQp0em5idUx2bHhOQnMxUUY4TlRCSHZ3MUFBek0zMkpaOUFyemt4d0s4akNaQXFlYTQ3V2hWOHlXeHErOW5zNmhZCkVOMkFVYmRqdWJVSzRCMmtiYlR1cEkyM1FiSE0rMmprKzY0dzdoN2cxT1JGWjNnOGJRSFlSUG84QUxxSHhhQjgKdE81WTYzRGU5SFRHcy9nVjFmbGROUDhDQXdFQUFUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUFFLzJjR1I4Vwp0Q2RZUDhEdS9uNmtLaWJUQWM4R01WOEQxcGVpc3RLWW5mYmttZno5NW80Nlh1TUk1aFVSazRsR09GT1VnZCtmCnRIRXE3VGtHWkhTcm5KQ0hRNmdhOEh5TEwrZExtaHNnQ3I1VVM0K01OcWZXU3djV1Bka3cxcUFQQWt0aUo1TXAKR2ZLK3llZEZLZ1ZWMTJKV2JjSG5MVmxnclJCSWxhTGcvZU5wMTNRL2hkTXlSQTZRek83VFVuc29kbWNNWVo1WgpHUXUzdDRhVXkzakE1THhTbEt4M3hpanRKTmZIbUgwaVp5b3hHUDVObENyNUMzMDhiZFNOdmVtakMxNFA3RmphCmNOSnFJM3l5TlowaEZyam8vRGROeC9PUDkxZzY0TjVGeUJXcHVHSzhTdmZ0ZDBmMkJMNzJvVjk2NWRQL3lROEUKQjVrNlplcklaSEhnK0RsV2FSd1piWEVtZGgyZk1aWGlXdUo2YkUvajFyT2N0LzAvakNxM00xdDRWYnlMNW9ySgpPSmJ5d2lZSXUrMndZU3cxYTZOV290a2JQa3h0SGF0NjhJR2RITUE5TFUxL2lQWmR1RkdoVzBRWDlWanRKV1JlCk5iUE9HYXBtb3BPSm9kSXZVbHhZaVlORTNYVXEwYUVJbjA5K2I1SXg4TzhFZHpzbWNxUVBLVE01cGkyd1FidG4KMkQ1M0pWMFZESGdsSkhRQVl1ZnRtOGxzY0dzVlRHWk9kOE1hWkN3UTljRkkraGZnczdFY2lVaFJIUFpZazdCVQp3eEE1MnYxeVVqQWQrSTlHTG5HenNlZVFRV1YzZXhyL2tUVEJOQnFuN2VqSDVIK1RCUVdDUUt0azhWOURCc2diCndqdkZYRkh0TFlOVlByUUltaHdiTmFCSzB0Q09OT01WSDV3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlFbGpDQ0FuNENDUURHS0FMVXpYc2QyakFOQmdrcWhraUc5dzBCQVFzRkFEQU5NUXN3Q1FZRFZRUUdFd0pWClV6QWVGdzB5TURFeE1qSXlNRFExTkRsYUZ3MHlNVEV4TWpJeU1EUTFORGxhTUEweEN6QUpCZ05WQkFZVEFsVlQKTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUF5WHhCN1U0OHFZV1MvYmF3dnpBYgp3b2R3OFhDNUNrczIwTi85bFRpL2psc3I1QkQ3TWxjWnFQOTBtVllUUHBib0NjdmN1UWo4dk9KblZBNjNpd2hOCi9xN2lpdVlOUkh2VkMzd3JyL2lIclZVVzNFUUpmajFhUGFUdzROMUZEdXgzYWREWHVuYnd0TG1jQTJXWUxoQy8KZDh6SnBYSXIwMUVTdTBIcGwrZVhjY051NU9TT0pMRFZKd3BTajhVV2lTSjNmNVhOU1pNNHFRR2hBekltNDBJUwoyNlg3UEQydm5OVnRxNXF3YlU4UVFac0JhU2FiblVqQ2VUWFVoTW9lUldtaGY4N2oyL0FFcXB0UlZodjNQUXRGCmNmTDNLM3J3U3JVVzloTnZ0aU1JRlpvb0xKZGdEaE96bkZ5V0tYZTBESE9TTDBOUmp2YU44UWJpRjh5RzA5ZUoKNk5oZzNJdnpzOWxzSlBpbHFQT0FkVDF2Y1l2a05WZWkrMGx3Ukl6WXJ6VzFxYUhYYitNSVdCWTVkQXFOTUlIVQp1Q3laY1JIb2xlT0h4ejVEUU1xZm1rOXVmYk9uWTZTd2Y2U2RyNWl4U0pxMXNvRDc4SE54RTFFRGQzN1l0NGtsCjV6UFFTSERJdm8vTU5jbnZOSjZDTk5Pemd5c0gxREJHcWZabWNKcUdZdFJQd0xKNHBtRnNyWmtDQVEyLzByUXkKdHpuYnVMdmx4TkJzMVFGOE5UQkh2dzFBQXpNMzJKWjlBcnpreHdLOGpDWkFxZWE0N1doVjh5V3hxKzluczZoWQpFTjJBVWJkanViVUs0QjJrYmJUdXBJMjNRYkhNKzJqays2NHc3aDdnMU9SRlozZzhiUUhZUlBvOEFMcUh4YUI4CnRPNVk2M0RlOUhUR3MvZ1YxZmxkTlA4Q0F3RUFBVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBZ0VBRS8yY0dSOFcKdENkWVA4RHUvbjZrS2liVEFjOEdNVjhEMXBlaXN0S1luZmJrbWZ6OTVvNDZYdU1JNWhVUms0bEdPRk9VZ2QrZgp0SEVxN1RrR1pIU3JuSkNIUTZnYThIeUxMK2RMbWhzZ0NyNVVTNCtNTnFmV1N3Y1dQZGt3MXFBUEFrdGlKNU1wCkdmSyt5ZWRGS2dWVjEySldiY0huTFZsZ3JSQklsYUxnL2VOcDEzUS9oZE15UkE2UXpPN1RVbnNvZG1jTVlaNVoKR1F1M3Q0YVV5M2pBNUx4U2xLeDN4aWp0Sk5mSG1IMGlaeW94R1A1TmxDcjVDMzA4YmRTTnZlbWpDMTRQN0ZqYQpjTkpxSTN5eU5aMGhGcmpvL0RkTngvT1A5MWc2NE41RnlCV3B1R0s4U3ZmdGQwZjJCTDcyb1Y5NjVkUC95UThFCkI1azZaZXJJWkhIZytEbFdhUndaYlhFbWRoMmZNWlhpV3VKNmJFL2oxck9jdC8wL2pDcTNNMXQ0VmJ5TDVvckoKT0pieXdpWUl1KzJ3WVN3MWE2TldvdGtiUGt4dEhhdDY4SUdkSE1BOUxVMS9pUFpkdUZHaFcwUVg5Vmp0SldSZQpOYlBPR2FwbW9wT0pvZEl2VWx4WWlZTkUzWFVxMGFFSW4wOStiNUl4OE84RWR6c21jcVFQS1RNNXBpMndRYnRuCjJENTNKVjBWREhnbEpIUUFZdWZ0bThsc2NHc1ZUR1pPZDhNYVpDd1E5Y0ZJK2hmZ3M3RWNpVWhSSFBaWWs3QlUKd3hBNTJ2MXlVakFkK0k5R0xuR3pzZWVRUVdWM2V4ci9rVFRCTkJxbjdlakg1SCtUQlFXQ1FLdGs4VjlEQnNnYgp3anZGWEZIdExZTlZQclFJbWh3Yk5hQkswdENPTk9NVkg1dz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="),
		},
	}
	scheme := runtime.NewScheme()
	corev1.AddToScheme(scheme)
	cmapiv1.AddToScheme(scheme)
	client := fake.NewFakeClientWithScheme(scheme, &basicCert, basicSecret)
	mockService := &MockService{}
	controller := controllers.CertificateReconciler{
		Client:     client,
		Log:        nil,
		Scheme:     nil,
		Cache:      make(map[string]*controllers.AcmCertificate),
		AcmService: mockService,
	}

	controller.Cache["foo/bar"] = &controllers.AcmCertificate{
		Summary: &acm.CertificateSummary{},
		Tags: []*acm.Tag{
			{
				Key:   aws2.String("legalzoom.com/cert-importer/cert-revision"),
				Value: aws2.String("1"),
			},
		},
	}

	controller.Reconcile(ctrl.Request{NamespacedName: types.NamespacedName{
		Namespace: "foo",
		Name:      "bar",
	}})

	if mockService.input != nil {
		if !hasTag("legalzoom.com/cert-importer/cert-id", "foo/bar", mockService.input.Tags) {
			t.Error("Incorrect cert-id tag")
		}
		if !hasTag("legalzoom.com/cert-importer/cert-revision", "2", mockService.input.Tags) {
			t.Error("Incorrect cert-revision tag")
		}
	} else {
		t.Fail()
	}
}

func TestImportExistingCertWithoutRevision(t *testing.T) {
	basicCert := cmapiv1.Certificate{
		TypeMeta: v1.TypeMeta{},
		ObjectMeta: v1.ObjectMeta{
			Annotations: map[string]string{
				"legalzoom.com/import-to-acm": "true",
			},
			Name:      "bar",
			Namespace: "foo",
		},
		Spec: cmapiv1.CertificateSpec{
			SecretName: "secret",
		},
		Status: cmapiv1.CertificateStatus{
			Conditions: []cmapiv1.CertificateCondition{
				{
					Type:   cmapiv1.CertificateConditionReady,
					Status: cmmetav1.ConditionTrue,
				},
			},
		},
	}

	basicSecret := &corev1.Secret{
		ObjectMeta: v1.ObjectMeta{
			Name:      "secret",
			Namespace: "foo",
		},
		Data: map[string][]byte{
			"tls.key": []byte("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBeVh4QjdVNDhxWVdTL2Jhd3Z6QWJ3b2R3OFhDNUNrczIwTi85bFRpL2psc3I1QkQ3Ck1sY1pxUDkwbVZZVFBwYm9DY3ZjdVFqOHZPSm5WQTYzaXdoTi9xN2lpdVlOUkh2VkMzd3JyL2lIclZVVzNFUUoKZmoxYVBhVHc0TjFGRHV4M2FkRFh1bmJ3dExtY0EyV1lMaEMvZDh6SnBYSXIwMUVTdTBIcGwrZVhjY051NU9TTwpKTERWSndwU2o4VVdpU0ozZjVYTlNaTTRxUUdoQXpJbTQwSVMyNlg3UEQydm5OVnRxNXF3YlU4UVFac0JhU2FiCm5VakNlVFhVaE1vZVJXbWhmODdqMi9BRXFwdFJWaHYzUFF0RmNmTDNLM3J3U3JVVzloTnZ0aU1JRlpvb0xKZGcKRGhPem5GeVdLWGUwREhPU0wwTlJqdmFOOFFiaUY4eUcwOWVKNk5oZzNJdnpzOWxzSlBpbHFQT0FkVDF2Y1l2awpOVmVpKzBsd1JJellyelcxcWFIWGIrTUlXQlk1ZEFxTk1JSFV1Q3laY1JIb2xlT0h4ejVEUU1xZm1rOXVmYk9uClk2U3dmNlNkcjVpeFNKcTFzb0Q3OEhOeEUxRURkMzdZdDRrbDV6UFFTSERJdm8vTU5jbnZOSjZDTk5Pemd5c0gKMURCR3FmWm1jSnFHWXRSUHdMSjRwbUZzclprQ0FRMi8wclF5dHpuYnVMdmx4TkJzMVFGOE5UQkh2dzFBQXpNMwoySlo5QXJ6a3h3SzhqQ1pBcWVhNDdXaFY4eVd4cSs5bnM2aFlFTjJBVWJkanViVUs0QjJrYmJUdXBJMjNRYkhNCisyamsrNjR3N2g3ZzFPUkZaM2c4YlFIWVJQbzhBTHFIeGFCOHRPNVk2M0RlOUhUR3MvZ1YxZmxkTlA4Q0F3RUEKQVFLQ0FnQVJWdWcxaSs0Y2lLcEZ1MXNxbVBGS3BHMUwyZStTdXpaVWMzSlhUVEx2QlZtWm52eC9NSSs4dzM4OQpVdk1GQitlZ01ETW1tV2RtdWZVNmZxbTlCVkh4QVF2dCtDNWNIbXdQT1BocGhISG9zTkh1MHN3ZVdSbFRCTWJXCkV6VEdQQU5xejlaQTdjdDVRaC96Q3VNMTA2c21uREVlVTkwQnFwQjZIUW9GVUtEdjRXbkJ1UW1panJWSlR0SWMKSFZIN0swUXRicTdrRGc5cVBBR25UTUdiL1N1eVMyNTdtTE5zUTlIVVd0T2tGSkhKazVWamZ6Y1ZLaFhTYUplSgpkZnQwN2NwQVBZWE9mN0ZuSFVhNnFsMTBtMnUyaXJwS3U2SENUQ05WdWdaN0hqaXI0MEJoMWdVbU1QdmNFUHU3ClJkbncyR0ZVUCs3YzVzc0FXeDlKL1FmOVl5Y3pBM3JCNFVDU1p5RWVZajZDbEV1akVoaXc0RWpkMHRQTjAvcmoKNUVXQ0JsV3RWZzl3eXVlV1dYSWJvTG13U3Q3WGJHbnBvL1JOUm1JZ2pMYnVqaFA1Ynk2VDVhMGJCZVRnejMrRwpuc2UwWXFpVHVUc05hVmFaSkpQQVlnQnBlRk1pVEk3ZEV6ZGpWUVl4OHpwclpNUzZ0ci9iZWVSNUlEWjVpV2dMCml5UmZLUWpjc1I0aVVxMm90SjdNakRZbWY0VDExdjIwaUVSUGRhelNoTjFweW02NjFUUHV4YnJpQU9pdnE5cUwKQ0R4Q3IvTzJaSDdUaHM0enNicVBWcjZBSTZJeEt3UU1XcmY3ZjFZQmFudi9MMFZTM0d5ZkJYcjNrc1FCdlZzQQpLUFNZTVp5NzNqaU9aNU81Rm1DRmNnTFRveERBQ1J6QUJmazZSZjJMOFcyTWdKUHhBUUtDQVFFQTlDTVVkVit5CmtnZlJJdGJ5UGpaYjhBTlRBd3FTSFJOSTVBR1JxWll4SWdKS1JOM2VCYkM5aGZEMU9zR2FvNUI3bDZlTnpuR28KaXhYYkhQWEVHcDhDaURLMzdubGViNXlZZU9FYkI5aG0yT2JIMUdzQ1BpaVBsQThhcVd1MVJzUjdXS3pRNXpXaApyOHZOSVo3YVZNVnJTSlAvWlRPV0kzNHZBQ1RGZmFadzJkZ3VXdUNIYjRRZmRmVTFxV01rMG1taGlkdDR4WTMvClJCa3NGWlFvYzA5R0hydVREL3lsL05yZVh4UzM4NE9PSjRDTzdTQWhpQzJwRkZNYmdDTG9LOWdteHRtMWwzdlcKQm05UHFCelE1RzZwVHFnUE9nWEVIV1h1SE1GUm5MY0JYaldwWmx1b29tNm84MmtyeEhid3NkbXExRnk3cGZObAoxaHd1OGlDemI5M0ZjUUtDQVFFQTAwYWR5TUpSaXNYQnRVU0NTcHpyU2Z2SHRGaHoydnlhY0tnVDRRUjU2SUM3CmJSazJuV3B0MmxiS05sRXE1MkpGZ3hkZ293OEUwNUhzNkszdHdQUkUxKys5bHFlaVRXbExqbjE3bGw2Nnk4QWEKS1N3TGErNjJFVmJvQXNlaG9zTDdUWGYvK2ZDQUszWWJQNGxzMkJNN3hMNFk3NWNaNDJmUGt3MkVlak5idzZLRgo1L3pwaDRQUk5mUnBrM0g2K0NSWkRHK1JaTEY1a05wZVo3dlBZTGJmSnpoZGl3SXpKMzNOdk5tTTc2bktQYVNWClZsR2ZyckhNYm1oUjZ6RGZ1V1hxTnhoTGtWMmZGVTExa09HWE9DWFVyUnUvL1ZENDhPcXgvL2o3MUdBOS85aXAKbWRqdWZSZURtaTF3UXdqektyYzd3N1ZUbmpNVXBaTFVPdWZMSEMycGJ3S0NBUUVBcnNyMitOcGRkYVJYSGdTYgpSK09QaTVZMXR2VzRpMHlsWVdtbUtxODMya3VkZFJVTXd6STVYMDZYcFV1OE5lTmFPY2hqQlMzbktEMnJ0VjVZCjIxNkJaNVk0am1zaksvSUlVSE9LOE9FRk1jSjV6Q0laWnZ1UFlNZzNwSmxUSHFuS1RrRGRDTTBqU0VRNFNCdjkKNGJlL0NpVzhNMjd0emRlb093Z1l4YytHK05HSXp0UDI0K2JLeDUrYW5mNDMvTlpZSytXUTRKQzc5THU1RG5JWApUQWUwQW9qMXovcHB0VkhXNkdoakU5eGF5UG1JVzBvbjkrSUpMbDRhVUhHdG5NYVRiTWV1OWhoWnNoMjhBSGN4Ck1IdnlpRGhYUG9tbVVnNEtuMWZoNEx3K0pIOXpHN0FBV3R1ejV5S2pqWFJDL0hNRmxpb1d4OGd1WDArcVpQejQKdTkwaVlRS0NBUUFyUGxyeFNvU3lLTVA3UENpRzZSTm5zemN1L0tQS0FNWURwUU5jblRQdW1OckQrOU1uNlM3Two3OUMzeVdsRXJ1S1hjR09CUElPNllqWGhjaWdseEZtSzhURVc4dnpQWjJ2bG9GMTVhNjVFSWUrNDJhRUUySGsvCmwxQXBzWDZ0OThiRUZubTRTTGVUTGJ0cUI5RFZjU3BjbktReDlmV0FqREQ2WWx2cFB6WGJGeHJkWHZEVm9lOWkKWWNKeVFYUWk4aDJmNC80WVpCTUR5UTVsb1JWVE1Gc0FoaEx2YnVYVmdYUm80UVp0ejR6cmpSSmI5cHorZnJuZgpKMDhOR3BYUU5zSDN3T3RHdDZqbURWS3c4dHVtekdkNWZ5S08wTklEVGFaZFJETVhSeE9wbUVrdWlpNVdRRWZaCmVNOXZpUmRzZU5Dc3dDSjdVTzA2N3BDdDlkK214dG5WQW9JQkFDbzhxZk1NaXdUaWFRQkdqL1UyNTZjaDBvMXQKcnNjWGNsSEVHdGNCam05dkFlN1Y0SkdIajN5c24yMFZWNmQ1SmVyRVAvSmp5Sk40R2E1TW5tN3NDekFEN0RjSgpBTUFxUVNxb2tCODVsQ0xIUUVXR3Q5dU5HMnhCZjRJR1l4VEx6UENUd0NHOUR3dHZEV1VYby9nOFpOblVwRkR4Clo5UThFbDRwOXhBZzFZWUNLUGhOcHIrNit0SVBkS1dFaWJhWUZMaEhEdWJ2SXZSa3FrR3FhdWNEdVM1S0dEYmYKeXBZd0g1dUN1Qk5ta3EvaG8wdEhNeG80czZvSWlWenFPSWNmUnJUTUFidjdrRmNaZGtiYVQyOC81ekFmWk9OQwpuWGVVT1RpQXBQQ2RnWXN3V21GYUVzTUdpL09yRlA0eHNYNHdFQTF1ZFYxdlYyMlY3Zkx3NmVPQ2NVZz0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"),
			"tls.crt": []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVsakNDQW40Q0NRREdLQUxVelhzZDJqQU5CZ2txaGtpRzl3MEJBUXNGQURBTk1Rc3dDUVlEVlFRR0V3SlYKVXpBZUZ3MHlNREV4TWpJeU1EUTFORGxhRncweU1URXhNakl5TURRMU5EbGFNQTB4Q3pBSkJnTlZCQVlUQWxWVApNSUlDSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQXlYeEI3VTQ4cVlXUy9iYXd2ekFiCndvZHc4WEM1Q2tzMjBOLzlsVGkvamxzcjVCRDdNbGNacVA5MG1WWVRQcGJvQ2N2Y3VRajh2T0puVkE2M2l3aE4KL3E3aWl1WU5SSHZWQzN3cnIvaUhyVlVXM0VRSmZqMWFQYVR3NE4xRkR1eDNhZERYdW5id3RMbWNBMldZTGhDLwpkOHpKcFhJcjAxRVN1MEhwbCtlWGNjTnU1T1NPSkxEVkp3cFNqOFVXaVNKM2Y1WE5TWk00cVFHaEF6SW00MElTCjI2WDdQRDJ2bk5WdHE1cXdiVThRUVpzQmFTYWJuVWpDZVRYVWhNb2VSV21oZjg3ajIvQUVxcHRSVmh2M1BRdEYKY2ZMM0szcndTclVXOWhOdnRpTUlGWm9vTEpkZ0RoT3puRnlXS1hlMERIT1NMME5SanZhTjhRYmlGOHlHMDllSgo2TmhnM0l2enM5bHNKUGlscVBPQWRUMXZjWXZrTlZlaSswbHdSSXpZcnpXMXFhSFhiK01JV0JZNWRBcU5NSUhVCnVDeVpjUkhvbGVPSHh6NURRTXFmbWs5dWZiT25ZNlN3ZjZTZHI1aXhTSnExc29ENzhITnhFMUVEZDM3WXQ0a2wKNXpQUVNIREl2by9NTmNudk5KNkNOTk96Z3lzSDFEQkdxZlptY0pxR1l0UlB3TEo0cG1Gc3Jaa0NBUTIvMHJReQp0em5idUx2bHhOQnMxUUY4TlRCSHZ3MUFBek0zMkpaOUFyemt4d0s4akNaQXFlYTQ3V2hWOHlXeHErOW5zNmhZCkVOMkFVYmRqdWJVSzRCMmtiYlR1cEkyM1FiSE0rMmprKzY0dzdoN2cxT1JGWjNnOGJRSFlSUG84QUxxSHhhQjgKdE81WTYzRGU5SFRHcy9nVjFmbGROUDhDQXdFQUFUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUFFLzJjR1I4Vwp0Q2RZUDhEdS9uNmtLaWJUQWM4R01WOEQxcGVpc3RLWW5mYmttZno5NW80Nlh1TUk1aFVSazRsR09GT1VnZCtmCnRIRXE3VGtHWkhTcm5KQ0hRNmdhOEh5TEwrZExtaHNnQ3I1VVM0K01OcWZXU3djV1Bka3cxcUFQQWt0aUo1TXAKR2ZLK3llZEZLZ1ZWMTJKV2JjSG5MVmxnclJCSWxhTGcvZU5wMTNRL2hkTXlSQTZRek83VFVuc29kbWNNWVo1WgpHUXUzdDRhVXkzakE1THhTbEt4M3hpanRKTmZIbUgwaVp5b3hHUDVObENyNUMzMDhiZFNOdmVtakMxNFA3RmphCmNOSnFJM3l5TlowaEZyam8vRGROeC9PUDkxZzY0TjVGeUJXcHVHSzhTdmZ0ZDBmMkJMNzJvVjk2NWRQL3lROEUKQjVrNlplcklaSEhnK0RsV2FSd1piWEVtZGgyZk1aWGlXdUo2YkUvajFyT2N0LzAvakNxM00xdDRWYnlMNW9ySgpPSmJ5d2lZSXUrMndZU3cxYTZOV290a2JQa3h0SGF0NjhJR2RITUE5TFUxL2lQWmR1RkdoVzBRWDlWanRKV1JlCk5iUE9HYXBtb3BPSm9kSXZVbHhZaVlORTNYVXEwYUVJbjA5K2I1SXg4TzhFZHpzbWNxUVBLVE01cGkyd1FidG4KMkQ1M0pWMFZESGdsSkhRQVl1ZnRtOGxzY0dzVlRHWk9kOE1hWkN3UTljRkkraGZnczdFY2lVaFJIUFpZazdCVQp3eEE1MnYxeVVqQWQrSTlHTG5HenNlZVFRV1YzZXhyL2tUVEJOQnFuN2VqSDVIK1RCUVdDUUt0azhWOURCc2diCndqdkZYRkh0TFlOVlByUUltaHdiTmFCSzB0Q09OT01WSDV3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlFbGpDQ0FuNENDUURHS0FMVXpYc2QyakFOQmdrcWhraUc5dzBCQVFzRkFEQU5NUXN3Q1FZRFZRUUdFd0pWClV6QWVGdzB5TURFeE1qSXlNRFExTkRsYUZ3MHlNVEV4TWpJeU1EUTFORGxhTUEweEN6QUpCZ05WQkFZVEFsVlQKTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUF5WHhCN1U0OHFZV1MvYmF3dnpBYgp3b2R3OFhDNUNrczIwTi85bFRpL2psc3I1QkQ3TWxjWnFQOTBtVllUUHBib0NjdmN1UWo4dk9KblZBNjNpd2hOCi9xN2lpdVlOUkh2VkMzd3JyL2lIclZVVzNFUUpmajFhUGFUdzROMUZEdXgzYWREWHVuYnd0TG1jQTJXWUxoQy8KZDh6SnBYSXIwMUVTdTBIcGwrZVhjY051NU9TT0pMRFZKd3BTajhVV2lTSjNmNVhOU1pNNHFRR2hBekltNDBJUwoyNlg3UEQydm5OVnRxNXF3YlU4UVFac0JhU2FiblVqQ2VUWFVoTW9lUldtaGY4N2oyL0FFcXB0UlZodjNQUXRGCmNmTDNLM3J3U3JVVzloTnZ0aU1JRlpvb0xKZGdEaE96bkZ5V0tYZTBESE9TTDBOUmp2YU44UWJpRjh5RzA5ZUoKNk5oZzNJdnpzOWxzSlBpbHFQT0FkVDF2Y1l2a05WZWkrMGx3Ukl6WXJ6VzFxYUhYYitNSVdCWTVkQXFOTUlIVQp1Q3laY1JIb2xlT0h4ejVEUU1xZm1rOXVmYk9uWTZTd2Y2U2RyNWl4U0pxMXNvRDc4SE54RTFFRGQzN1l0NGtsCjV6UFFTSERJdm8vTU5jbnZOSjZDTk5Pemd5c0gxREJHcWZabWNKcUdZdFJQd0xKNHBtRnNyWmtDQVEyLzByUXkKdHpuYnVMdmx4TkJzMVFGOE5UQkh2dzFBQXpNMzJKWjlBcnpreHdLOGpDWkFxZWE0N1doVjh5V3hxKzluczZoWQpFTjJBVWJkanViVUs0QjJrYmJUdXBJMjNRYkhNKzJqays2NHc3aDdnMU9SRlozZzhiUUhZUlBvOEFMcUh4YUI4CnRPNVk2M0RlOUhUR3MvZ1YxZmxkTlA4Q0F3RUFBVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBZ0VBRS8yY0dSOFcKdENkWVA4RHUvbjZrS2liVEFjOEdNVjhEMXBlaXN0S1luZmJrbWZ6OTVvNDZYdU1JNWhVUms0bEdPRk9VZ2QrZgp0SEVxN1RrR1pIU3JuSkNIUTZnYThIeUxMK2RMbWhzZ0NyNVVTNCtNTnFmV1N3Y1dQZGt3MXFBUEFrdGlKNU1wCkdmSyt5ZWRGS2dWVjEySldiY0huTFZsZ3JSQklsYUxnL2VOcDEzUS9oZE15UkE2UXpPN1RVbnNvZG1jTVlaNVoKR1F1M3Q0YVV5M2pBNUx4U2xLeDN4aWp0Sk5mSG1IMGlaeW94R1A1TmxDcjVDMzA4YmRTTnZlbWpDMTRQN0ZqYQpjTkpxSTN5eU5aMGhGcmpvL0RkTngvT1A5MWc2NE41RnlCV3B1R0s4U3ZmdGQwZjJCTDcyb1Y5NjVkUC95UThFCkI1azZaZXJJWkhIZytEbFdhUndaYlhFbWRoMmZNWlhpV3VKNmJFL2oxck9jdC8wL2pDcTNNMXQ0VmJ5TDVvckoKT0pieXdpWUl1KzJ3WVN3MWE2TldvdGtiUGt4dEhhdDY4SUdkSE1BOUxVMS9pUFpkdUZHaFcwUVg5Vmp0SldSZQpOYlBPR2FwbW9wT0pvZEl2VWx4WWlZTkUzWFVxMGFFSW4wOStiNUl4OE84RWR6c21jcVFQS1RNNXBpMndRYnRuCjJENTNKVjBWREhnbEpIUUFZdWZ0bThsc2NHc1ZUR1pPZDhNYVpDd1E5Y0ZJK2hmZ3M3RWNpVWhSSFBaWWs3QlUKd3hBNTJ2MXlVakFkK0k5R0xuR3pzZWVRUVdWM2V4ci9rVFRCTkJxbjdlakg1SCtUQlFXQ1FLdGs4VjlEQnNnYgp3anZGWEZIdExZTlZQclFJbWh3Yk5hQkswdENPTk9NVkg1dz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="),
		},
	}
	scheme := runtime.NewScheme()
	corev1.AddToScheme(scheme)
	cmapiv1.AddToScheme(scheme)
	client := fake.NewFakeClientWithScheme(scheme, &basicCert, basicSecret)
	mockService := &MockService{}
	controller := controllers.CertificateReconciler{
		Client:     client,
		Log:        nil,
		Scheme:     nil,
		Cache:      make(map[string]*controllers.AcmCertificate),
		AcmService: mockService,
	}

	controller.Reconcile(ctrl.Request{NamespacedName: types.NamespacedName{
		Namespace: "foo",
		Name:      "bar",
	}})

	if mockService.input != nil {
		if !hasTag("legalzoom.com/cert-importer/cert-id", "foo/bar", mockService.input.Tags) {
			t.Error("Incorrect cert-id tag")
		}
		if !hasTag("legalzoom.com/cert-importer/cert-revision", "0", mockService.input.Tags) {
			t.Error("Incorrect cert-revision tag")
		}
	} else {
		t.Fail()
	}
}

func TestImportNotReadyCert(t *testing.T) {
	basicCert := cmapiv1.Certificate{
		TypeMeta: v1.TypeMeta{},
		ObjectMeta: v1.ObjectMeta{
			Annotations: map[string]string{
				"legalzoom.com/import-to-acm": "true",
			},
			Name:      "bar",
			Namespace: "foo",
		},
		Spec: cmapiv1.CertificateSpec{
			SecretName: "secret",
		},
		Status: cmapiv1.CertificateStatus{
			Conditions: []cmapiv1.CertificateCondition{
				{
					Type:   cmapiv1.CertificateConditionReady,
					Status: cmmetav1.ConditionFalse,
				},
			},
		},
	}

	basicSecret := &corev1.Secret{
		ObjectMeta: v1.ObjectMeta{
			Name:      "secret",
			Namespace: "foo",
		},
		Data: map[string][]byte{
			"tls.key": []byte("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBeVh4QjdVNDhxWVdTL2Jhd3Z6QWJ3b2R3OFhDNUNrczIwTi85bFRpL2psc3I1QkQ3Ck1sY1pxUDkwbVZZVFBwYm9DY3ZjdVFqOHZPSm5WQTYzaXdoTi9xN2lpdVlOUkh2VkMzd3JyL2lIclZVVzNFUUoKZmoxYVBhVHc0TjFGRHV4M2FkRFh1bmJ3dExtY0EyV1lMaEMvZDh6SnBYSXIwMUVTdTBIcGwrZVhjY051NU9TTwpKTERWSndwU2o4VVdpU0ozZjVYTlNaTTRxUUdoQXpJbTQwSVMyNlg3UEQydm5OVnRxNXF3YlU4UVFac0JhU2FiCm5VakNlVFhVaE1vZVJXbWhmODdqMi9BRXFwdFJWaHYzUFF0RmNmTDNLM3J3U3JVVzloTnZ0aU1JRlpvb0xKZGcKRGhPem5GeVdLWGUwREhPU0wwTlJqdmFOOFFiaUY4eUcwOWVKNk5oZzNJdnpzOWxzSlBpbHFQT0FkVDF2Y1l2awpOVmVpKzBsd1JJellyelcxcWFIWGIrTUlXQlk1ZEFxTk1JSFV1Q3laY1JIb2xlT0h4ejVEUU1xZm1rOXVmYk9uClk2U3dmNlNkcjVpeFNKcTFzb0Q3OEhOeEUxRURkMzdZdDRrbDV6UFFTSERJdm8vTU5jbnZOSjZDTk5Pemd5c0gKMURCR3FmWm1jSnFHWXRSUHdMSjRwbUZzclprQ0FRMi8wclF5dHpuYnVMdmx4TkJzMVFGOE5UQkh2dzFBQXpNMwoySlo5QXJ6a3h3SzhqQ1pBcWVhNDdXaFY4eVd4cSs5bnM2aFlFTjJBVWJkanViVUs0QjJrYmJUdXBJMjNRYkhNCisyamsrNjR3N2g3ZzFPUkZaM2c4YlFIWVJQbzhBTHFIeGFCOHRPNVk2M0RlOUhUR3MvZ1YxZmxkTlA4Q0F3RUEKQVFLQ0FnQVJWdWcxaSs0Y2lLcEZ1MXNxbVBGS3BHMUwyZStTdXpaVWMzSlhUVEx2QlZtWm52eC9NSSs4dzM4OQpVdk1GQitlZ01ETW1tV2RtdWZVNmZxbTlCVkh4QVF2dCtDNWNIbXdQT1BocGhISG9zTkh1MHN3ZVdSbFRCTWJXCkV6VEdQQU5xejlaQTdjdDVRaC96Q3VNMTA2c21uREVlVTkwQnFwQjZIUW9GVUtEdjRXbkJ1UW1panJWSlR0SWMKSFZIN0swUXRicTdrRGc5cVBBR25UTUdiL1N1eVMyNTdtTE5zUTlIVVd0T2tGSkhKazVWamZ6Y1ZLaFhTYUplSgpkZnQwN2NwQVBZWE9mN0ZuSFVhNnFsMTBtMnUyaXJwS3U2SENUQ05WdWdaN0hqaXI0MEJoMWdVbU1QdmNFUHU3ClJkbncyR0ZVUCs3YzVzc0FXeDlKL1FmOVl5Y3pBM3JCNFVDU1p5RWVZajZDbEV1akVoaXc0RWpkMHRQTjAvcmoKNUVXQ0JsV3RWZzl3eXVlV1dYSWJvTG13U3Q3WGJHbnBvL1JOUm1JZ2pMYnVqaFA1Ynk2VDVhMGJCZVRnejMrRwpuc2UwWXFpVHVUc05hVmFaSkpQQVlnQnBlRk1pVEk3ZEV6ZGpWUVl4OHpwclpNUzZ0ci9iZWVSNUlEWjVpV2dMCml5UmZLUWpjc1I0aVVxMm90SjdNakRZbWY0VDExdjIwaUVSUGRhelNoTjFweW02NjFUUHV4YnJpQU9pdnE5cUwKQ0R4Q3IvTzJaSDdUaHM0enNicVBWcjZBSTZJeEt3UU1XcmY3ZjFZQmFudi9MMFZTM0d5ZkJYcjNrc1FCdlZzQQpLUFNZTVp5NzNqaU9aNU81Rm1DRmNnTFRveERBQ1J6QUJmazZSZjJMOFcyTWdKUHhBUUtDQVFFQTlDTVVkVit5CmtnZlJJdGJ5UGpaYjhBTlRBd3FTSFJOSTVBR1JxWll4SWdKS1JOM2VCYkM5aGZEMU9zR2FvNUI3bDZlTnpuR28KaXhYYkhQWEVHcDhDaURLMzdubGViNXlZZU9FYkI5aG0yT2JIMUdzQ1BpaVBsQThhcVd1MVJzUjdXS3pRNXpXaApyOHZOSVo3YVZNVnJTSlAvWlRPV0kzNHZBQ1RGZmFadzJkZ3VXdUNIYjRRZmRmVTFxV01rMG1taGlkdDR4WTMvClJCa3NGWlFvYzA5R0hydVREL3lsL05yZVh4UzM4NE9PSjRDTzdTQWhpQzJwRkZNYmdDTG9LOWdteHRtMWwzdlcKQm05UHFCelE1RzZwVHFnUE9nWEVIV1h1SE1GUm5MY0JYaldwWmx1b29tNm84MmtyeEhid3NkbXExRnk3cGZObAoxaHd1OGlDemI5M0ZjUUtDQVFFQTAwYWR5TUpSaXNYQnRVU0NTcHpyU2Z2SHRGaHoydnlhY0tnVDRRUjU2SUM3CmJSazJuV3B0MmxiS05sRXE1MkpGZ3hkZ293OEUwNUhzNkszdHdQUkUxKys5bHFlaVRXbExqbjE3bGw2Nnk4QWEKS1N3TGErNjJFVmJvQXNlaG9zTDdUWGYvK2ZDQUszWWJQNGxzMkJNN3hMNFk3NWNaNDJmUGt3MkVlak5idzZLRgo1L3pwaDRQUk5mUnBrM0g2K0NSWkRHK1JaTEY1a05wZVo3dlBZTGJmSnpoZGl3SXpKMzNOdk5tTTc2bktQYVNWClZsR2ZyckhNYm1oUjZ6RGZ1V1hxTnhoTGtWMmZGVTExa09HWE9DWFVyUnUvL1ZENDhPcXgvL2o3MUdBOS85aXAKbWRqdWZSZURtaTF3UXdqektyYzd3N1ZUbmpNVXBaTFVPdWZMSEMycGJ3S0NBUUVBcnNyMitOcGRkYVJYSGdTYgpSK09QaTVZMXR2VzRpMHlsWVdtbUtxODMya3VkZFJVTXd6STVYMDZYcFV1OE5lTmFPY2hqQlMzbktEMnJ0VjVZCjIxNkJaNVk0am1zaksvSUlVSE9LOE9FRk1jSjV6Q0laWnZ1UFlNZzNwSmxUSHFuS1RrRGRDTTBqU0VRNFNCdjkKNGJlL0NpVzhNMjd0emRlb093Z1l4YytHK05HSXp0UDI0K2JLeDUrYW5mNDMvTlpZSytXUTRKQzc5THU1RG5JWApUQWUwQW9qMXovcHB0VkhXNkdoakU5eGF5UG1JVzBvbjkrSUpMbDRhVUhHdG5NYVRiTWV1OWhoWnNoMjhBSGN4Ck1IdnlpRGhYUG9tbVVnNEtuMWZoNEx3K0pIOXpHN0FBV3R1ejV5S2pqWFJDL0hNRmxpb1d4OGd1WDArcVpQejQKdTkwaVlRS0NBUUFyUGxyeFNvU3lLTVA3UENpRzZSTm5zemN1L0tQS0FNWURwUU5jblRQdW1OckQrOU1uNlM3Two3OUMzeVdsRXJ1S1hjR09CUElPNllqWGhjaWdseEZtSzhURVc4dnpQWjJ2bG9GMTVhNjVFSWUrNDJhRUUySGsvCmwxQXBzWDZ0OThiRUZubTRTTGVUTGJ0cUI5RFZjU3BjbktReDlmV0FqREQ2WWx2cFB6WGJGeHJkWHZEVm9lOWkKWWNKeVFYUWk4aDJmNC80WVpCTUR5UTVsb1JWVE1Gc0FoaEx2YnVYVmdYUm80UVp0ejR6cmpSSmI5cHorZnJuZgpKMDhOR3BYUU5zSDN3T3RHdDZqbURWS3c4dHVtekdkNWZ5S08wTklEVGFaZFJETVhSeE9wbUVrdWlpNVdRRWZaCmVNOXZpUmRzZU5Dc3dDSjdVTzA2N3BDdDlkK214dG5WQW9JQkFDbzhxZk1NaXdUaWFRQkdqL1UyNTZjaDBvMXQKcnNjWGNsSEVHdGNCam05dkFlN1Y0SkdIajN5c24yMFZWNmQ1SmVyRVAvSmp5Sk40R2E1TW5tN3NDekFEN0RjSgpBTUFxUVNxb2tCODVsQ0xIUUVXR3Q5dU5HMnhCZjRJR1l4VEx6UENUd0NHOUR3dHZEV1VYby9nOFpOblVwRkR4Clo5UThFbDRwOXhBZzFZWUNLUGhOcHIrNit0SVBkS1dFaWJhWUZMaEhEdWJ2SXZSa3FrR3FhdWNEdVM1S0dEYmYKeXBZd0g1dUN1Qk5ta3EvaG8wdEhNeG80czZvSWlWenFPSWNmUnJUTUFidjdrRmNaZGtiYVQyOC81ekFmWk9OQwpuWGVVT1RpQXBQQ2RnWXN3V21GYUVzTUdpL09yRlA0eHNYNHdFQTF1ZFYxdlYyMlY3Zkx3NmVPQ2NVZz0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"),
			"tls.crt": []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVsakNDQW40Q0NRREdLQUxVelhzZDJqQU5CZ2txaGtpRzl3MEJBUXNGQURBTk1Rc3dDUVlEVlFRR0V3SlYKVXpBZUZ3MHlNREV4TWpJeU1EUTFORGxhRncweU1URXhNakl5TURRMU5EbGFNQTB4Q3pBSkJnTlZCQVlUQWxWVApNSUlDSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQXlYeEI3VTQ4cVlXUy9iYXd2ekFiCndvZHc4WEM1Q2tzMjBOLzlsVGkvamxzcjVCRDdNbGNacVA5MG1WWVRQcGJvQ2N2Y3VRajh2T0puVkE2M2l3aE4KL3E3aWl1WU5SSHZWQzN3cnIvaUhyVlVXM0VRSmZqMWFQYVR3NE4xRkR1eDNhZERYdW5id3RMbWNBMldZTGhDLwpkOHpKcFhJcjAxRVN1MEhwbCtlWGNjTnU1T1NPSkxEVkp3cFNqOFVXaVNKM2Y1WE5TWk00cVFHaEF6SW00MElTCjI2WDdQRDJ2bk5WdHE1cXdiVThRUVpzQmFTYWJuVWpDZVRYVWhNb2VSV21oZjg3ajIvQUVxcHRSVmh2M1BRdEYKY2ZMM0szcndTclVXOWhOdnRpTUlGWm9vTEpkZ0RoT3puRnlXS1hlMERIT1NMME5SanZhTjhRYmlGOHlHMDllSgo2TmhnM0l2enM5bHNKUGlscVBPQWRUMXZjWXZrTlZlaSswbHdSSXpZcnpXMXFhSFhiK01JV0JZNWRBcU5NSUhVCnVDeVpjUkhvbGVPSHh6NURRTXFmbWs5dWZiT25ZNlN3ZjZTZHI1aXhTSnExc29ENzhITnhFMUVEZDM3WXQ0a2wKNXpQUVNIREl2by9NTmNudk5KNkNOTk96Z3lzSDFEQkdxZlptY0pxR1l0UlB3TEo0cG1Gc3Jaa0NBUTIvMHJReQp0em5idUx2bHhOQnMxUUY4TlRCSHZ3MUFBek0zMkpaOUFyemt4d0s4akNaQXFlYTQ3V2hWOHlXeHErOW5zNmhZCkVOMkFVYmRqdWJVSzRCMmtiYlR1cEkyM1FiSE0rMmprKzY0dzdoN2cxT1JGWjNnOGJRSFlSUG84QUxxSHhhQjgKdE81WTYzRGU5SFRHcy9nVjFmbGROUDhDQXdFQUFUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUFFLzJjR1I4Vwp0Q2RZUDhEdS9uNmtLaWJUQWM4R01WOEQxcGVpc3RLWW5mYmttZno5NW80Nlh1TUk1aFVSazRsR09GT1VnZCtmCnRIRXE3VGtHWkhTcm5KQ0hRNmdhOEh5TEwrZExtaHNnQ3I1VVM0K01OcWZXU3djV1Bka3cxcUFQQWt0aUo1TXAKR2ZLK3llZEZLZ1ZWMTJKV2JjSG5MVmxnclJCSWxhTGcvZU5wMTNRL2hkTXlSQTZRek83VFVuc29kbWNNWVo1WgpHUXUzdDRhVXkzakE1THhTbEt4M3hpanRKTmZIbUgwaVp5b3hHUDVObENyNUMzMDhiZFNOdmVtakMxNFA3RmphCmNOSnFJM3l5TlowaEZyam8vRGROeC9PUDkxZzY0TjVGeUJXcHVHSzhTdmZ0ZDBmMkJMNzJvVjk2NWRQL3lROEUKQjVrNlplcklaSEhnK0RsV2FSd1piWEVtZGgyZk1aWGlXdUo2YkUvajFyT2N0LzAvakNxM00xdDRWYnlMNW9ySgpPSmJ5d2lZSXUrMndZU3cxYTZOV290a2JQa3h0SGF0NjhJR2RITUE5TFUxL2lQWmR1RkdoVzBRWDlWanRKV1JlCk5iUE9HYXBtb3BPSm9kSXZVbHhZaVlORTNYVXEwYUVJbjA5K2I1SXg4TzhFZHpzbWNxUVBLVE01cGkyd1FidG4KMkQ1M0pWMFZESGdsSkhRQVl1ZnRtOGxzY0dzVlRHWk9kOE1hWkN3UTljRkkraGZnczdFY2lVaFJIUFpZazdCVQp3eEE1MnYxeVVqQWQrSTlHTG5HenNlZVFRV1YzZXhyL2tUVEJOQnFuN2VqSDVIK1RCUVdDUUt0azhWOURCc2diCndqdkZYRkh0TFlOVlByUUltaHdiTmFCSzB0Q09OT01WSDV3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlFbGpDQ0FuNENDUURHS0FMVXpYc2QyakFOQmdrcWhraUc5dzBCQVFzRkFEQU5NUXN3Q1FZRFZRUUdFd0pWClV6QWVGdzB5TURFeE1qSXlNRFExTkRsYUZ3MHlNVEV4TWpJeU1EUTFORGxhTUEweEN6QUpCZ05WQkFZVEFsVlQKTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUF5WHhCN1U0OHFZV1MvYmF3dnpBYgp3b2R3OFhDNUNrczIwTi85bFRpL2psc3I1QkQ3TWxjWnFQOTBtVllUUHBib0NjdmN1UWo4dk9KblZBNjNpd2hOCi9xN2lpdVlOUkh2VkMzd3JyL2lIclZVVzNFUUpmajFhUGFUdzROMUZEdXgzYWREWHVuYnd0TG1jQTJXWUxoQy8KZDh6SnBYSXIwMUVTdTBIcGwrZVhjY051NU9TT0pMRFZKd3BTajhVV2lTSjNmNVhOU1pNNHFRR2hBekltNDBJUwoyNlg3UEQydm5OVnRxNXF3YlU4UVFac0JhU2FiblVqQ2VUWFVoTW9lUldtaGY4N2oyL0FFcXB0UlZodjNQUXRGCmNmTDNLM3J3U3JVVzloTnZ0aU1JRlpvb0xKZGdEaE96bkZ5V0tYZTBESE9TTDBOUmp2YU44UWJpRjh5RzA5ZUoKNk5oZzNJdnpzOWxzSlBpbHFQT0FkVDF2Y1l2a05WZWkrMGx3Ukl6WXJ6VzFxYUhYYitNSVdCWTVkQXFOTUlIVQp1Q3laY1JIb2xlT0h4ejVEUU1xZm1rOXVmYk9uWTZTd2Y2U2RyNWl4U0pxMXNvRDc4SE54RTFFRGQzN1l0NGtsCjV6UFFTSERJdm8vTU5jbnZOSjZDTk5Pemd5c0gxREJHcWZabWNKcUdZdFJQd0xKNHBtRnNyWmtDQVEyLzByUXkKdHpuYnVMdmx4TkJzMVFGOE5UQkh2dzFBQXpNMzJKWjlBcnpreHdLOGpDWkFxZWE0N1doVjh5V3hxKzluczZoWQpFTjJBVWJkanViVUs0QjJrYmJUdXBJMjNRYkhNKzJqays2NHc3aDdnMU9SRlozZzhiUUhZUlBvOEFMcUh4YUI4CnRPNVk2M0RlOUhUR3MvZ1YxZmxkTlA4Q0F3RUFBVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBZ0VBRS8yY0dSOFcKdENkWVA4RHUvbjZrS2liVEFjOEdNVjhEMXBlaXN0S1luZmJrbWZ6OTVvNDZYdU1JNWhVUms0bEdPRk9VZ2QrZgp0SEVxN1RrR1pIU3JuSkNIUTZnYThIeUxMK2RMbWhzZ0NyNVVTNCtNTnFmV1N3Y1dQZGt3MXFBUEFrdGlKNU1wCkdmSyt5ZWRGS2dWVjEySldiY0huTFZsZ3JSQklsYUxnL2VOcDEzUS9oZE15UkE2UXpPN1RVbnNvZG1jTVlaNVoKR1F1M3Q0YVV5M2pBNUx4U2xLeDN4aWp0Sk5mSG1IMGlaeW94R1A1TmxDcjVDMzA4YmRTTnZlbWpDMTRQN0ZqYQpjTkpxSTN5eU5aMGhGcmpvL0RkTngvT1A5MWc2NE41RnlCV3B1R0s4U3ZmdGQwZjJCTDcyb1Y5NjVkUC95UThFCkI1azZaZXJJWkhIZytEbFdhUndaYlhFbWRoMmZNWlhpV3VKNmJFL2oxck9jdC8wL2pDcTNNMXQ0VmJ5TDVvckoKT0pieXdpWUl1KzJ3WVN3MWE2TldvdGtiUGt4dEhhdDY4SUdkSE1BOUxVMS9pUFpkdUZHaFcwUVg5Vmp0SldSZQpOYlBPR2FwbW9wT0pvZEl2VWx4WWlZTkUzWFVxMGFFSW4wOStiNUl4OE84RWR6c21jcVFQS1RNNXBpMndRYnRuCjJENTNKVjBWREhnbEpIUUFZdWZ0bThsc2NHc1ZUR1pPZDhNYVpDd1E5Y0ZJK2hmZ3M3RWNpVWhSSFBaWWs3QlUKd3hBNTJ2MXlVakFkK0k5R0xuR3pzZWVRUVdWM2V4ci9rVFRCTkJxbjdlakg1SCtUQlFXQ1FLdGs4VjlEQnNnYgp3anZGWEZIdExZTlZQclFJbWh3Yk5hQkswdENPTk9NVkg1dz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="),
		},
	}
	scheme := runtime.NewScheme()
	corev1.AddToScheme(scheme)
	cmapiv1.AddToScheme(scheme)
	client := fake.NewFakeClientWithScheme(scheme, &basicCert, basicSecret)
	mockService := &MockService{}
	controller := controllers.CertificateReconciler{
		Client:     client,
		Log:        nil,
		Scheme:     nil,
		Cache:      make(map[string]*controllers.AcmCertificate),
		AcmService: mockService,
	}

	controller.Reconcile(ctrl.Request{NamespacedName: types.NamespacedName{
		Namespace: "foo",
		Name:      "bar",
	}})

	if mockService.input != nil {
		t.Fail()
	}
}

func TestDelete(t *testing.T) {
	now := v1.Now()
	basicCert := cmapiv1.Certificate{
		TypeMeta: v1.TypeMeta{},
		ObjectMeta: v1.ObjectMeta{
			Annotations: map[string]string{
				"legalzoom.com/import-to-acm": "true",
			},
			DeletionTimestamp: &now,
			Finalizers: []string{
				"certificate.legalzoom.com",
			},
			Name:      "bar",
			Namespace: "foo",
		},
		Spec: cmapiv1.CertificateSpec{
			SecretName: "secret",
		},
		Status: cmapiv1.CertificateStatus{},
	}

	basicSecret := &corev1.Secret{
		ObjectMeta: v1.ObjectMeta{
			Name:      "secret",
			Namespace: "foo",
		},
		Data: map[string][]byte{
			"tls.key": []byte("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBeVh4QjdVNDhxWVdTL2Jhd3Z6QWJ3b2R3OFhDNUNrczIwTi85bFRpL2psc3I1QkQ3Ck1sY1pxUDkwbVZZVFBwYm9DY3ZjdVFqOHZPSm5WQTYzaXdoTi9xN2lpdVlOUkh2VkMzd3JyL2lIclZVVzNFUUoKZmoxYVBhVHc0TjFGRHV4M2FkRFh1bmJ3dExtY0EyV1lMaEMvZDh6SnBYSXIwMUVTdTBIcGwrZVhjY051NU9TTwpKTERWSndwU2o4VVdpU0ozZjVYTlNaTTRxUUdoQXpJbTQwSVMyNlg3UEQydm5OVnRxNXF3YlU4UVFac0JhU2FiCm5VakNlVFhVaE1vZVJXbWhmODdqMi9BRXFwdFJWaHYzUFF0RmNmTDNLM3J3U3JVVzloTnZ0aU1JRlpvb0xKZGcKRGhPem5GeVdLWGUwREhPU0wwTlJqdmFOOFFiaUY4eUcwOWVKNk5oZzNJdnpzOWxzSlBpbHFQT0FkVDF2Y1l2awpOVmVpKzBsd1JJellyelcxcWFIWGIrTUlXQlk1ZEFxTk1JSFV1Q3laY1JIb2xlT0h4ejVEUU1xZm1rOXVmYk9uClk2U3dmNlNkcjVpeFNKcTFzb0Q3OEhOeEUxRURkMzdZdDRrbDV6UFFTSERJdm8vTU5jbnZOSjZDTk5Pemd5c0gKMURCR3FmWm1jSnFHWXRSUHdMSjRwbUZzclprQ0FRMi8wclF5dHpuYnVMdmx4TkJzMVFGOE5UQkh2dzFBQXpNMwoySlo5QXJ6a3h3SzhqQ1pBcWVhNDdXaFY4eVd4cSs5bnM2aFlFTjJBVWJkanViVUs0QjJrYmJUdXBJMjNRYkhNCisyamsrNjR3N2g3ZzFPUkZaM2c4YlFIWVJQbzhBTHFIeGFCOHRPNVk2M0RlOUhUR3MvZ1YxZmxkTlA4Q0F3RUEKQVFLQ0FnQVJWdWcxaSs0Y2lLcEZ1MXNxbVBGS3BHMUwyZStTdXpaVWMzSlhUVEx2QlZtWm52eC9NSSs4dzM4OQpVdk1GQitlZ01ETW1tV2RtdWZVNmZxbTlCVkh4QVF2dCtDNWNIbXdQT1BocGhISG9zTkh1MHN3ZVdSbFRCTWJXCkV6VEdQQU5xejlaQTdjdDVRaC96Q3VNMTA2c21uREVlVTkwQnFwQjZIUW9GVUtEdjRXbkJ1UW1panJWSlR0SWMKSFZIN0swUXRicTdrRGc5cVBBR25UTUdiL1N1eVMyNTdtTE5zUTlIVVd0T2tGSkhKazVWamZ6Y1ZLaFhTYUplSgpkZnQwN2NwQVBZWE9mN0ZuSFVhNnFsMTBtMnUyaXJwS3U2SENUQ05WdWdaN0hqaXI0MEJoMWdVbU1QdmNFUHU3ClJkbncyR0ZVUCs3YzVzc0FXeDlKL1FmOVl5Y3pBM3JCNFVDU1p5RWVZajZDbEV1akVoaXc0RWpkMHRQTjAvcmoKNUVXQ0JsV3RWZzl3eXVlV1dYSWJvTG13U3Q3WGJHbnBvL1JOUm1JZ2pMYnVqaFA1Ynk2VDVhMGJCZVRnejMrRwpuc2UwWXFpVHVUc05hVmFaSkpQQVlnQnBlRk1pVEk3ZEV6ZGpWUVl4OHpwclpNUzZ0ci9iZWVSNUlEWjVpV2dMCml5UmZLUWpjc1I0aVVxMm90SjdNakRZbWY0VDExdjIwaUVSUGRhelNoTjFweW02NjFUUHV4YnJpQU9pdnE5cUwKQ0R4Q3IvTzJaSDdUaHM0enNicVBWcjZBSTZJeEt3UU1XcmY3ZjFZQmFudi9MMFZTM0d5ZkJYcjNrc1FCdlZzQQpLUFNZTVp5NzNqaU9aNU81Rm1DRmNnTFRveERBQ1J6QUJmazZSZjJMOFcyTWdKUHhBUUtDQVFFQTlDTVVkVit5CmtnZlJJdGJ5UGpaYjhBTlRBd3FTSFJOSTVBR1JxWll4SWdKS1JOM2VCYkM5aGZEMU9zR2FvNUI3bDZlTnpuR28KaXhYYkhQWEVHcDhDaURLMzdubGViNXlZZU9FYkI5aG0yT2JIMUdzQ1BpaVBsQThhcVd1MVJzUjdXS3pRNXpXaApyOHZOSVo3YVZNVnJTSlAvWlRPV0kzNHZBQ1RGZmFadzJkZ3VXdUNIYjRRZmRmVTFxV01rMG1taGlkdDR4WTMvClJCa3NGWlFvYzA5R0hydVREL3lsL05yZVh4UzM4NE9PSjRDTzdTQWhpQzJwRkZNYmdDTG9LOWdteHRtMWwzdlcKQm05UHFCelE1RzZwVHFnUE9nWEVIV1h1SE1GUm5MY0JYaldwWmx1b29tNm84MmtyeEhid3NkbXExRnk3cGZObAoxaHd1OGlDemI5M0ZjUUtDQVFFQTAwYWR5TUpSaXNYQnRVU0NTcHpyU2Z2SHRGaHoydnlhY0tnVDRRUjU2SUM3CmJSazJuV3B0MmxiS05sRXE1MkpGZ3hkZ293OEUwNUhzNkszdHdQUkUxKys5bHFlaVRXbExqbjE3bGw2Nnk4QWEKS1N3TGErNjJFVmJvQXNlaG9zTDdUWGYvK2ZDQUszWWJQNGxzMkJNN3hMNFk3NWNaNDJmUGt3MkVlak5idzZLRgo1L3pwaDRQUk5mUnBrM0g2K0NSWkRHK1JaTEY1a05wZVo3dlBZTGJmSnpoZGl3SXpKMzNOdk5tTTc2bktQYVNWClZsR2ZyckhNYm1oUjZ6RGZ1V1hxTnhoTGtWMmZGVTExa09HWE9DWFVyUnUvL1ZENDhPcXgvL2o3MUdBOS85aXAKbWRqdWZSZURtaTF3UXdqektyYzd3N1ZUbmpNVXBaTFVPdWZMSEMycGJ3S0NBUUVBcnNyMitOcGRkYVJYSGdTYgpSK09QaTVZMXR2VzRpMHlsWVdtbUtxODMya3VkZFJVTXd6STVYMDZYcFV1OE5lTmFPY2hqQlMzbktEMnJ0VjVZCjIxNkJaNVk0am1zaksvSUlVSE9LOE9FRk1jSjV6Q0laWnZ1UFlNZzNwSmxUSHFuS1RrRGRDTTBqU0VRNFNCdjkKNGJlL0NpVzhNMjd0emRlb093Z1l4YytHK05HSXp0UDI0K2JLeDUrYW5mNDMvTlpZSytXUTRKQzc5THU1RG5JWApUQWUwQW9qMXovcHB0VkhXNkdoakU5eGF5UG1JVzBvbjkrSUpMbDRhVUhHdG5NYVRiTWV1OWhoWnNoMjhBSGN4Ck1IdnlpRGhYUG9tbVVnNEtuMWZoNEx3K0pIOXpHN0FBV3R1ejV5S2pqWFJDL0hNRmxpb1d4OGd1WDArcVpQejQKdTkwaVlRS0NBUUFyUGxyeFNvU3lLTVA3UENpRzZSTm5zemN1L0tQS0FNWURwUU5jblRQdW1OckQrOU1uNlM3Two3OUMzeVdsRXJ1S1hjR09CUElPNllqWGhjaWdseEZtSzhURVc4dnpQWjJ2bG9GMTVhNjVFSWUrNDJhRUUySGsvCmwxQXBzWDZ0OThiRUZubTRTTGVUTGJ0cUI5RFZjU3BjbktReDlmV0FqREQ2WWx2cFB6WGJGeHJkWHZEVm9lOWkKWWNKeVFYUWk4aDJmNC80WVpCTUR5UTVsb1JWVE1Gc0FoaEx2YnVYVmdYUm80UVp0ejR6cmpSSmI5cHorZnJuZgpKMDhOR3BYUU5zSDN3T3RHdDZqbURWS3c4dHVtekdkNWZ5S08wTklEVGFaZFJETVhSeE9wbUVrdWlpNVdRRWZaCmVNOXZpUmRzZU5Dc3dDSjdVTzA2N3BDdDlkK214dG5WQW9JQkFDbzhxZk1NaXdUaWFRQkdqL1UyNTZjaDBvMXQKcnNjWGNsSEVHdGNCam05dkFlN1Y0SkdIajN5c24yMFZWNmQ1SmVyRVAvSmp5Sk40R2E1TW5tN3NDekFEN0RjSgpBTUFxUVNxb2tCODVsQ0xIUUVXR3Q5dU5HMnhCZjRJR1l4VEx6UENUd0NHOUR3dHZEV1VYby9nOFpOblVwRkR4Clo5UThFbDRwOXhBZzFZWUNLUGhOcHIrNit0SVBkS1dFaWJhWUZMaEhEdWJ2SXZSa3FrR3FhdWNEdVM1S0dEYmYKeXBZd0g1dUN1Qk5ta3EvaG8wdEhNeG80czZvSWlWenFPSWNmUnJUTUFidjdrRmNaZGtiYVQyOC81ekFmWk9OQwpuWGVVT1RpQXBQQ2RnWXN3V21GYUVzTUdpL09yRlA0eHNYNHdFQTF1ZFYxdlYyMlY3Zkx3NmVPQ2NVZz0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"),
			"tls.crt": []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVsakNDQW40Q0NRREdLQUxVelhzZDJqQU5CZ2txaGtpRzl3MEJBUXNGQURBTk1Rc3dDUVlEVlFRR0V3SlYKVXpBZUZ3MHlNREV4TWpJeU1EUTFORGxhRncweU1URXhNakl5TURRMU5EbGFNQTB4Q3pBSkJnTlZCQVlUQWxWVApNSUlDSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQXlYeEI3VTQ4cVlXUy9iYXd2ekFiCndvZHc4WEM1Q2tzMjBOLzlsVGkvamxzcjVCRDdNbGNacVA5MG1WWVRQcGJvQ2N2Y3VRajh2T0puVkE2M2l3aE4KL3E3aWl1WU5SSHZWQzN3cnIvaUhyVlVXM0VRSmZqMWFQYVR3NE4xRkR1eDNhZERYdW5id3RMbWNBMldZTGhDLwpkOHpKcFhJcjAxRVN1MEhwbCtlWGNjTnU1T1NPSkxEVkp3cFNqOFVXaVNKM2Y1WE5TWk00cVFHaEF6SW00MElTCjI2WDdQRDJ2bk5WdHE1cXdiVThRUVpzQmFTYWJuVWpDZVRYVWhNb2VSV21oZjg3ajIvQUVxcHRSVmh2M1BRdEYKY2ZMM0szcndTclVXOWhOdnRpTUlGWm9vTEpkZ0RoT3puRnlXS1hlMERIT1NMME5SanZhTjhRYmlGOHlHMDllSgo2TmhnM0l2enM5bHNKUGlscVBPQWRUMXZjWXZrTlZlaSswbHdSSXpZcnpXMXFhSFhiK01JV0JZNWRBcU5NSUhVCnVDeVpjUkhvbGVPSHh6NURRTXFmbWs5dWZiT25ZNlN3ZjZTZHI1aXhTSnExc29ENzhITnhFMUVEZDM3WXQ0a2wKNXpQUVNIREl2by9NTmNudk5KNkNOTk96Z3lzSDFEQkdxZlptY0pxR1l0UlB3TEo0cG1Gc3Jaa0NBUTIvMHJReQp0em5idUx2bHhOQnMxUUY4TlRCSHZ3MUFBek0zMkpaOUFyemt4d0s4akNaQXFlYTQ3V2hWOHlXeHErOW5zNmhZCkVOMkFVYmRqdWJVSzRCMmtiYlR1cEkyM1FiSE0rMmprKzY0dzdoN2cxT1JGWjNnOGJRSFlSUG84QUxxSHhhQjgKdE81WTYzRGU5SFRHcy9nVjFmbGROUDhDQXdFQUFUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUFFLzJjR1I4Vwp0Q2RZUDhEdS9uNmtLaWJUQWM4R01WOEQxcGVpc3RLWW5mYmttZno5NW80Nlh1TUk1aFVSazRsR09GT1VnZCtmCnRIRXE3VGtHWkhTcm5KQ0hRNmdhOEh5TEwrZExtaHNnQ3I1VVM0K01OcWZXU3djV1Bka3cxcUFQQWt0aUo1TXAKR2ZLK3llZEZLZ1ZWMTJKV2JjSG5MVmxnclJCSWxhTGcvZU5wMTNRL2hkTXlSQTZRek83VFVuc29kbWNNWVo1WgpHUXUzdDRhVXkzakE1THhTbEt4M3hpanRKTmZIbUgwaVp5b3hHUDVObENyNUMzMDhiZFNOdmVtakMxNFA3RmphCmNOSnFJM3l5TlowaEZyam8vRGROeC9PUDkxZzY0TjVGeUJXcHVHSzhTdmZ0ZDBmMkJMNzJvVjk2NWRQL3lROEUKQjVrNlplcklaSEhnK0RsV2FSd1piWEVtZGgyZk1aWGlXdUo2YkUvajFyT2N0LzAvakNxM00xdDRWYnlMNW9ySgpPSmJ5d2lZSXUrMndZU3cxYTZOV290a2JQa3h0SGF0NjhJR2RITUE5TFUxL2lQWmR1RkdoVzBRWDlWanRKV1JlCk5iUE9HYXBtb3BPSm9kSXZVbHhZaVlORTNYVXEwYUVJbjA5K2I1SXg4TzhFZHpzbWNxUVBLVE01cGkyd1FidG4KMkQ1M0pWMFZESGdsSkhRQVl1ZnRtOGxzY0dzVlRHWk9kOE1hWkN3UTljRkkraGZnczdFY2lVaFJIUFpZazdCVQp3eEE1MnYxeVVqQWQrSTlHTG5HenNlZVFRV1YzZXhyL2tUVEJOQnFuN2VqSDVIK1RCUVdDUUt0azhWOURCc2diCndqdkZYRkh0TFlOVlByUUltaHdiTmFCSzB0Q09OT01WSDV3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlFbGpDQ0FuNENDUURHS0FMVXpYc2QyakFOQmdrcWhraUc5dzBCQVFzRkFEQU5NUXN3Q1FZRFZRUUdFd0pWClV6QWVGdzB5TURFeE1qSXlNRFExTkRsYUZ3MHlNVEV4TWpJeU1EUTFORGxhTUEweEN6QUpCZ05WQkFZVEFsVlQKTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUF5WHhCN1U0OHFZV1MvYmF3dnpBYgp3b2R3OFhDNUNrczIwTi85bFRpL2psc3I1QkQ3TWxjWnFQOTBtVllUUHBib0NjdmN1UWo4dk9KblZBNjNpd2hOCi9xN2lpdVlOUkh2VkMzd3JyL2lIclZVVzNFUUpmajFhUGFUdzROMUZEdXgzYWREWHVuYnd0TG1jQTJXWUxoQy8KZDh6SnBYSXIwMUVTdTBIcGwrZVhjY051NU9TT0pMRFZKd3BTajhVV2lTSjNmNVhOU1pNNHFRR2hBekltNDBJUwoyNlg3UEQydm5OVnRxNXF3YlU4UVFac0JhU2FiblVqQ2VUWFVoTW9lUldtaGY4N2oyL0FFcXB0UlZodjNQUXRGCmNmTDNLM3J3U3JVVzloTnZ0aU1JRlpvb0xKZGdEaE96bkZ5V0tYZTBESE9TTDBOUmp2YU44UWJpRjh5RzA5ZUoKNk5oZzNJdnpzOWxzSlBpbHFQT0FkVDF2Y1l2a05WZWkrMGx3Ukl6WXJ6VzFxYUhYYitNSVdCWTVkQXFOTUlIVQp1Q3laY1JIb2xlT0h4ejVEUU1xZm1rOXVmYk9uWTZTd2Y2U2RyNWl4U0pxMXNvRDc4SE54RTFFRGQzN1l0NGtsCjV6UFFTSERJdm8vTU5jbnZOSjZDTk5Pemd5c0gxREJHcWZabWNKcUdZdFJQd0xKNHBtRnNyWmtDQVEyLzByUXkKdHpuYnVMdmx4TkJzMVFGOE5UQkh2dzFBQXpNMzJKWjlBcnpreHdLOGpDWkFxZWE0N1doVjh5V3hxKzluczZoWQpFTjJBVWJkanViVUs0QjJrYmJUdXBJMjNRYkhNKzJqays2NHc3aDdnMU9SRlozZzhiUUhZUlBvOEFMcUh4YUI4CnRPNVk2M0RlOUhUR3MvZ1YxZmxkTlA4Q0F3RUFBVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBZ0VBRS8yY0dSOFcKdENkWVA4RHUvbjZrS2liVEFjOEdNVjhEMXBlaXN0S1luZmJrbWZ6OTVvNDZYdU1JNWhVUms0bEdPRk9VZ2QrZgp0SEVxN1RrR1pIU3JuSkNIUTZnYThIeUxMK2RMbWhzZ0NyNVVTNCtNTnFmV1N3Y1dQZGt3MXFBUEFrdGlKNU1wCkdmSyt5ZWRGS2dWVjEySldiY0huTFZsZ3JSQklsYUxnL2VOcDEzUS9oZE15UkE2UXpPN1RVbnNvZG1jTVlaNVoKR1F1M3Q0YVV5M2pBNUx4U2xLeDN4aWp0Sk5mSG1IMGlaeW94R1A1TmxDcjVDMzA4YmRTTnZlbWpDMTRQN0ZqYQpjTkpxSTN5eU5aMGhGcmpvL0RkTngvT1A5MWc2NE41RnlCV3B1R0s4U3ZmdGQwZjJCTDcyb1Y5NjVkUC95UThFCkI1azZaZXJJWkhIZytEbFdhUndaYlhFbWRoMmZNWlhpV3VKNmJFL2oxck9jdC8wL2pDcTNNMXQ0VmJ5TDVvckoKT0pieXdpWUl1KzJ3WVN3MWE2TldvdGtiUGt4dEhhdDY4SUdkSE1BOUxVMS9pUFpkdUZHaFcwUVg5Vmp0SldSZQpOYlBPR2FwbW9wT0pvZEl2VWx4WWlZTkUzWFVxMGFFSW4wOStiNUl4OE84RWR6c21jcVFQS1RNNXBpMndRYnRuCjJENTNKVjBWREhnbEpIUUFZdWZ0bThsc2NHc1ZUR1pPZDhNYVpDd1E5Y0ZJK2hmZ3M3RWNpVWhSSFBaWWs3QlUKd3hBNTJ2MXlVakFkK0k5R0xuR3pzZWVRUVdWM2V4ci9rVFRCTkJxbjdlakg1SCtUQlFXQ1FLdGs4VjlEQnNnYgp3anZGWEZIdExZTlZQclFJbWh3Yk5hQkswdENPTk9NVkg1dz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="),
		},
	}
	scheme := runtime.NewScheme()
	corev1.AddToScheme(scheme)
	cmapiv1.AddToScheme(scheme)
	client := fake.NewFakeClientWithScheme(scheme, &basicCert, basicSecret)
	mockService := &MockService{}
	controller := controllers.CertificateReconciler{
		Client:     client,
		Log:        nil,
		Scheme:     nil,
		Cache:      make(map[string]*controllers.AcmCertificate),
		AcmService: mockService,
	}

	controller.Cache["foo/bar"] = &controllers.AcmCertificate{
		Summary: &acm.CertificateSummary{
			CertificateArn: aws2.String("arn"),
		},
		Tags: []*acm.Tag{},
	}

	_, err := controller.Reconcile(ctrl.Request{NamespacedName: types.NamespacedName{
		Namespace: "foo",
		Name:      "bar",
	}})

	if err != nil {
		t.Fail()
	}

}
